class HideImage extends Monogatari.Action{static matchString([e,t]){return"hide"===e&&"image"===t}constructor([e,t,i,...s]){super(),this.asset=i,this.element=monogatari.element().find(`[data-image="${this.asset}"]`),this.wrapper=monogatari.element().find("div .wrapper-image"),this.classes=void 0!==s?s:[],this.classes=this.classes.filter(e=>"at"!==e&&"with"!==e)}apply(){const e=this.element.data("position"),t=this._statement.match(/at\s(\S*)/),i=[...this.element.get(0).classList];for(const s of i)(s!==e||t instanceof Array)&&this.element.removeClass(s);if(t instanceof Array){const[e,i]=t;this.element.data("position",i)}this.wrapper.addClass("animated");const s=this.classes.indexOf("duration");if(s>-1?this.wrapper.style("animation-duration",this.classes[s+1]):this.wrapper.style("animation-duration",""),this.classes.length>0){for(const e of this.classes)this.wrapper.addClass(e);this.wrapper.data("visibility","invisible"),this.wrapper.on("animationend",e=>{"invisible"===e.target.dataset.visibility&&e.target.remove()})}else this.wrapper.remove();return this.element.remove(),Promise.resolve()}didApply(){const e=monogatari.state("images").filter(e=>{const[t,i,s]=e.split(" ");return s!==this.asset});return monogatari.state({images:e}),Promise.resolve({advance:!0})}willRevert(){return 0===monogatari.history("image").length?Promise.reject("Image history was empty."):Promise.resolve()}revert(){for(let e=monogatari.history("image").length-1;e>=0;e--){const t=monogatari.history("image")[e],[i,s,a]=t.split(" ");if(a===this.asset){const e=monogatari.prepareAction(t,{cycle:"Application"});return e.willApply().then(()=>e.apply().then(()=>e.didApply({updateHistory:!1,updateState:!0})))}}Promise.reject("Could not find a previous state to revert to")}didRevert(){return Promise.resolve({advance:!0,step:!0})}}HideImage.id="Hide::Image",monogatari.registerAction(HideImage);